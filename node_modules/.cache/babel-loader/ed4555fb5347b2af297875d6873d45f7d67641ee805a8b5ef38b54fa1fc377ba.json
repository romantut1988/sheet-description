{"ast":null,"code":"var _jsxFileName = \"D:\\\\sheet-description\\\\src\\\\EditableSpan.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TextField } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function EditableSpan(props) {\n  _s();\n  let [editMode, setEditMode] = useState(false);\n  let [title, setTitle] = useState(props.value);\n  const activateEditMode = () => {\n    setEditMode(true);\n    setTitle(props.value);\n  };\n  const activateViewMode = () => {\n    setEditMode(false);\n    props.onChange(title);\n  };\n  const changeTitle = e => {\n    setTitle(e.currentTarget.value);\n  };\n  return editMode ? /*#__PURE__*/_jsxDEV(TextField, {\n    variant: \"outlined\",\n    value: title,\n    onChange: changeTitle,\n    autoFocus: true,\n    onBlur: activateViewMode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 14\n  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n    onDoubleClick: activateEditMode,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 11\n  }, this);\n}\n_s(EditableSpan, \"QeJF1daIrCh753fIFS8q1vMlE0A=\");\n_c = EditableSpan;\nvar _c;\n$RefreshReg$(_c, \"EditableSpan\");","map":{"version":3,"names":["React","useState","TextField","jsxDEV","_jsxDEV","EditableSpan","props","_s","editMode","setEditMode","title","setTitle","value","activateEditMode","activateViewMode","onChange","changeTitle","e","currentTarget","variant","autoFocus","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","onDoubleClick","children","_c","$RefreshReg$"],"sources":["D:/sheet-description/src/EditableSpan.tsx"],"sourcesContent":["import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField variant=\"outlined\"\r\n                        value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAgBC,QAAQ,QAAO,OAAO;AAClD,SAAQC,SAAS,QAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOxC,OAAO,SAASC,YAAYA,CAACC,KAA4B,EAAE;EAAAC,EAAA;EACvD,IAAI,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,IAAI,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACK,KAAK,CAACM,KAAK,CAAC;EAE7C,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC3BJ,WAAW,CAAC,IAAI,CAAC;IACjBE,QAAQ,CAACL,KAAK,CAACM,KAAK,CAAC;EACzB,CAAC;EACD,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC3BL,WAAW,CAAC,KAAK,CAAC;IAClBH,KAAK,CAACS,QAAQ,CAACL,KAAK,CAAC;EACzB,CAAC;EACD,MAAMM,WAAW,GAAIC,CAAgC,IAAK;IACtDN,QAAQ,CAACM,CAAC,CAACC,aAAa,CAACN,KAAK,CAAC;EACnC,CAAC;EAED,OAAOJ,QAAQ,gBACNJ,OAAA,CAACF,SAAS;IAACiB,OAAO,EAAC,UAAU;IAClBP,KAAK,EAAEF,KAAM;IAACK,QAAQ,EAAEC,WAAY;IAACI,SAAS;IAACC,MAAM,EAAEP;EAAiB;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,gBACzFrB,OAAA;IAAMsB,aAAa,EAAEb,gBAAiB;IAAAc,QAAA,EAAErB,KAAK,CAACM;EAAK;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAQ;AACrE;AAAClB,EAAA,CApBeF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}