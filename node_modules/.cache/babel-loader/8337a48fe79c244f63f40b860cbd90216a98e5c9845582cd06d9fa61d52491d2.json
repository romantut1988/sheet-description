{"ast":null,"code":"import { tasksReducer } from './tasks-reducer';\nimport { todolistsReducer } from './todolists-reducer';\nimport { combineReducers, legacy_createStore } from 'redux';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todolists: todolistsReducer\n});\n// непосредственно создаём store\nexport const store = legacy_createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","map":{"version":3,"names":["tasksReducer","todolistsReducer","combineReducers","legacy_createStore","rootReducer","tasks","todolists","store","window"],"sources":["D:/sheet-description/src/state/store.ts"],"sourcesContent":["import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, legacy_createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = legacy_createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n"],"mappings":"AAAA,SAAQA,YAAY,QAAO,iBAAiB;AAC5C,SAAQC,gBAAgB,QAAO,qBAAqB;AACpD,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,OAAO;;AAEzD;AACA;AACA,MAAMC,WAAW,GAAGF,eAAe,CAAC;EAChCG,KAAK,EAAEL,YAAY;EACnBM,SAAS,EAAEL;AACf,CAAC,CAAC;AACF;AACA,OAAO,MAAMM,KAAK,GAAGJ,kBAAkB,CAACC,WAAW,CAAC;AACpD;;AAGA;AACA;AACAI,MAAM,CAACD,KAAK,GAAGA,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}